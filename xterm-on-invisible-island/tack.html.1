<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy for HTML5 for Linux version 5.6.0">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="generator" content="Manpage converted by man2html - see https://invisible-island.net/scripts/readme.html#others_scripts">
<title>tack(1)</title>
<link rel="SHORTCUT ICON" href="/img/icons/favicon.ico" type="image/x-icon">
<link rel="stylesheet" href="/css/man2html.css" type="text/css">
<style type="text/css">
@import "/css/simplenavXX.css" all;
</style>
  <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
<hr>
<p><a href="/">https://invisible-island.net/</a><a href="/ncurses/">ncurses/</a><a href="/ncurses/tack/">tack/</a></p>
<hr>
<h1 class="no-header">tack(1)</h1>
<pre>
</pre>
<h2><a name="h2-NAME" id="h2-NAME">NAME</a></h2>
<pre>       <b>tack</b> - <i>terminfo</i> action checker

</pre>
<h2><a name="h2-SYNOPSIS" id="h2-SYNOPSIS">SYNOPSIS</a></h2>
<pre>       <b>tack</b> [-diltV] [term]

</pre>
<h2><a name="h2-DESCRIPTION" id="h2-DESCRIPTION">DESCRIPTION</a></h2>
<pre>       The <b>tack</b> program has three purposes:

       (1) to  help  you  build  a  new  terminfo  entry describing an unknown
           terminal,

       (2) to test the correctness of an existing entry, and

       (3) to develop the correct pad timings needed  to  ensure  that  screen
           updates do not fall behind the incoming data stream.

       <b>Tack</b> presents a series of screen-painting and interactive tests in ways
       which are intended to make any mismatches between  the  terminfo  entry
       and  reality  visually obvious.  <b>Tack</b> also provides tools that can help
       in understanding how the terminal operates.

</pre>
<h3><a name="h3-OPTIONS" id="h3-OPTIONS">OPTIONS</a></h3>
<pre>       <i>-d</i>     Start <b>tack</b> with the debug-file "debug.log" opened.

       <i>-i</i>     Usually <b>tack</b> will  send  the  reset  and  init  strings  to  the
              terminal when the program starts up.  The <i>-i</i> option will inhibit
              the terminal initialization.

       <i>-l</i>     Start <b>tack</b> with the log-file "tack.log" opened.  This is also  a
              menu item.

       <i>-t</i>     Tell  <b>tack</b>  to override the terminfo settings for basic terminal
              functions.  When this option is set, <b>tack</b> will translate

              (cr) to \r,
              (cud1) to \n,
              (ind) to \n,
              (nel) to \r\n,
              (cub1) to \b,
              (bel) to \007,
              (ff) to \f and
              (ht) to \t.

       <i>-V</i>     Display the version information and exit.

       <i>term</i>   Terminfo terminal name to be tested.  If not present,  then  the
              $TERM environment variable will be used.

</pre>
<h2><a name="h2-OVERVIEW" id="h2-OVERVIEW">OVERVIEW</a></h2>
<pre>       Since  <b>tack</b>  is designed to test terminfo entries it is not possible to
       rely on the correctness of the terminfo database.  Because of this, the
       menuing  system  used  with  <b>tack</b>  is  very  primitive.  When a menu is
       printed, it will scroll the entire  screen.   To  compensate  for  this
       verbose  menu  system,  <b>tack</b> permits menu selection type ahead.  If you
       already know what action you would like <b>tack</b> to perform  then  you  can
       enter that value immediately and avoid the menu display.  When in doubt
       the question mark (?) is a good character to type.  A  carriage  return
       will execute the default action.  These default actions are designed to
       run all the standard tests.

       When <b>tack</b> first comes up it will display some basic  information  about
       the  terminal.   Take  some  time to verify this information.  If it is
       wrong many of the subsequent tests will fail.  The most important  item
       is  the screen size.  If the screen size is wrong, there is no point in
       proceeding.  (home) and (clear) are also critical  to  the  success  of
       subsequent  tests.  The values of (cr) (ind) (cub1) and (ht) may effect
       the tests if they are defined incorrectly.  If they are undefined  <b>tack</b>
       will  set  them  to  reasonable  defaults.  The last two entries on the
       display are the enquire and acknowledge  strings.   These  strings  are
       taken from the user strings (u9) and (u8).

       By  now  you  must  be wondering why the terminfo names are enclosed in
       parenthesis.  This has no profound meaning other  than  it  makes  them
       stand  out.  The <b>tack</b> program uses this convention any time it displays
       a terminfo name.  Remember that <b>tack</b> is designed to rely on  as  little
       of the terminfo entry as possible.

</pre>
<h2><a name="h2-CREATING-NEW-ENTRIES" id="h2-CREATING-NEW-ENTRIES">CREATING NEW ENTRIES</a></h2>
<pre>       <b>Tack</b> has a number of tools that are designed to help gather information
       about the terminal.  Although these  functions  are  not  dependent  on
       terminal  type,  you  may  wish to execute <b>tack</b> with options <i>-it</i>.  This
       will turn off initialization and default the standard entries.

       These tools may be reached from the main menu by selecting the  "tools"
       entry.

       <b>Echo</b> <b>tool</b>:  All data typed from the keyboard will be echoed back to the
       terminal.  Control characters are not translated to the up arrow format
       but  are sent as control characters.  This allows you to test an escape
       sequence and see what it actually does.  You may also elect  to  <b>enable</b>
       <b>hex</b>  <b>output</b>  <b>on</b> <b>echo</b> <b>tool</b> this will echo the characters in hexadecimal.
       Once the test is  running  you  may  enter  the  "lines"  or  "columns"
       keywords which will display a pattern that will help you determine your
       screen size.  A complete list of keywords will be  displayed  when  the
       test starts.  Type "help" to redisplay the list of available commands.

       <b>Reply</b>  <b>tool</b>:   This  tool  acts  much  like  the echo tool, but control
       characters that are sent from the  terminal  more  than  one  character
       after  a  carriage return will be expanded to the up arrow format.  For
       example on a standard ANSI terminal you may type:

              <i>CR ESC</i> [ c

       and the response will be echoed as something like:

              ^[ [ ? 6 c

       <b>ANSI</b> <b>sgr</b> <b>display</b>:  This test assumes you have  an  ANSI  terminal.   It
       goes  through  attribute  numbers 0 to 119, displaying each in turn and
       using that SGR number to write the text.  This shows you which  of  the
       SGR  modes  are  actually  implemented  by  the  terminal.   Note: some
       terminals (such as Tektronix color) use the private use  characters  to
       augment  the  functionality  of  the  SGR  command.   These private use
       characters may be interjected into the escape sequence  by  typing  the
       character ( &lt;, =, &gt;, ? ) after the original display has been shown.

       <b>ANSI</b>  <b>status</b>  <b>reports</b>:   This  test  queries  the  terminal in standard
       ANSI/VT-100 fashion.  The results of this test may help determine  what
       options are supported by your terminal.

       <b>ANSI</b>  <b>character</b>  <b>sets</b>:  This test displays the character sets available
       on an ANSI/VT-100 style terminal.  Character  sets  on  a  real  VT-100
       terminal are usually defined with smacs=\E(0 and rmacs=\E(B.  The first
       character after the escape defines the font bank.  The second character
       defines  the  character  set.   This test allows you to view any of the
       possible combinations.  Private use character sets are defined  by  the
       digits.  Standard character sets are located in the alphabetic range.

</pre>
<h2><a name="h2-VERIFYING-AN-EXISTING-ENTRY" id="h2-VERIFYING-AN-EXISTING-ENTRY">VERIFYING AN EXISTING ENTRY</a></h2>
<pre>       You  can  verify  the  correctness of an entry with the "begin testing"
       function.  This entry is the default action and will be chosen  if  you
       hit  carriage  return  (or enter).  This will bring up a secondary menu
       that allows you to select more specific tests.

       The general philosophy of the program is, for each capability, to  send
       an  appropriate test pattern to the terminal then send a description of
       what the user should expect.  Occasionally (as when checking  function-
       key  capabilities)  the  program  will ask you to enter input for it to
       check.

       If the test fails then you have the option of dynamically changing  the
       terminfo  entry  and  re-running the test.  This is done with the "edit
       terminfo" menu item.   The  edit  submenu  allows  you  to  change  the
       offending  terminfo  entry  and immediately retest the capability.  The
       edit menu lets you do other things with the terminfo, such as;  display
       the  entire  terminfo  entry,  display  which caps have been tested and
       display which caps cannot be tested.  This  menu  also  allows  you  to
       write  the  newly  modified  terminfo  to  disc.   If you have made any
       modifications to the terminfo <b>tack</b> will ask you if you want to save the
       file  to  disc  before  it exits.  The filename will be the same as the
       terminal name.  After  the  program  exits  you  can  run  the  <b>tic(1M)</b>
       compiler on the new terminfo to install it in the terminfo database.

</pre>
<h2><a name="h2-CORRECTING-PAD-TIMINGS" id="h2-CORRECTING-PAD-TIMINGS">CORRECTING PAD TIMINGS</a></h2>
<h3><a name="h3-Theory-of-Overruns-and-Padding" id="h3-Theory-of-Overruns-and-Padding">Theory of Overruns and Padding</a></h3>
<pre>       Some  terminals require significant amounts of time (that is, more than
       one transmitted-character interval) to do screen  updates  that  change
       large  portions  of the screen, such as screen clears, line insertions,
       line deletions, and scrolls (including scrolls triggered by line  feeds
       or a write to the lowest, right-hand-most cell of the screen).

       If  the computer continues to send characters to the terminal while one
       of these time-consuming operations is  going  on,  the  screen  may  be
       garbled.   Since  the  length  of  a character transmission time varies
       inversely with transmission speed in cps,  entries  which  function  at
       lower speeds may break at higher speeds.

       Similar   problems  result  if  the  host  machine  is  simply  sending
       characters at a sustained rate faster than the terminal can buffer  and
       process  them.   In  either case, when the terminal cannot process them
       and cannot tell the host to stop soon enough, it will just  drop  them.
       The  dropped  characters  could be text, escape sequences or the escape
       character itself, causing some really strange-looking  displays.   This
       kind of glitch is called an <i>overrun</i>.

       In  terminfo  entries,  you  can  attach  a  <i>pad</i>  <i>time</i>  to  each string
       capability that is a number of milliseconds to delay after sending  it.
       This will give the terminal time to catch up and avoid overruns.

       If  you  are  running  a software terminal emulator, or you are on an X
       pseudo-tty, or your terminal is on  an  RS-232C  line  which  correctly
       handles  RTS/CTS  hardware  flow  control,  then  pads are not strictly
       necessary.  However, some display packages (such  as  <a href="/ncurses/man/ncurses.3x.html"><b>ncurses(3X)</b></a>)  use
       the  pad  counts  to  calculate  the  fastest  way to implement certain
       functions.  For example:  scrolling  the  screen  may  be  faster  than
       deleting the top line.

       One  common  way  to  avoid overruns is with XON/XOFF handshaking.  But
       even this handshake may have problems at high baud rates.   This  is  a
       result  of the way XON/XOFF works.  The terminal tells the host to stop
       with an XOFF.  When the host gets this  character,  it  stops  sending.
       However,  there  is a small amount of time between the stop request and
       the actual stop.  During this window, the  terminal  must  continue  to
       accept  characters  even  though  it has told the host to stop.  If the
       terminal sends the stop request too late, then its internal buffer will
       overflow.   If it sends the stop character too early, then the terminal
       is not getting the most efficient use out of its internal buffers.   In
       a  real application at high baud rates, a terminal could get a dozen or
       more characters before the host gets around to suspending transmission.
       Connecting  the  terminal  over  a  network  will make the problem much
       worse.

       (RTS/CTS handshaking does not have this problem because the  UARTs  are
       signal-connected  and  the  "stop  flow"  is  done at the lowest level,
       without software intervention).

</pre>
<h3><a name="h3-Timing-your-terminal" id="h3-Timing-your-terminal">Timing your terminal</a></h3>
<pre>       In order to get accurate timings from your terminal <b>tack</b> needs to  know
       when  the terminal has finished processing all the characters that were
       sent.  This requires a different type of handshaking than the  XON/XOFF
       that  is  supported by most terminals.  <b>Tack</b> needs to send a request to
       the terminal and wait for its reply.  Many terminals will respond  with
       an  ACK  when  they receive an ENQ.  This is the preferred method since
       the sequence is short.  ANSI/VT-100  style  terminals  can  mimic  this
       handshake  with  the  escape  sequence  that  requests  "primary device
       attributes".

              <i>ESC</i> [ c

       The terminal will respond with a sequence like:

              <i>ESC</i> [ ? 1 ; 0 c

       <b>Tack</b> assumes that (u9) is the enquire sequence and  that  (u8)  is  the
       acknowledge  string.   A  VT-100  style  terminal could set u9=\E[c and
       u8=\E[?1;0c.  Acknowledge strings fall into two categories.

       1)  Strings with a unique terminating character and,

       2)  strings of fixed length.

       The acknowledge string for the VT-100 is of the  first  type  since  it
       always  ends  with the letter "c".  Some Tektronix terminals have fixed
       length acknowledge strings.  <b>Tack</b> supports both  types  of  strings  by
       scanning for the terminating character until the length of the expected
       acknowledge string has arrived.  (u8) should be  set  to  some  typical
       acknowledge that will be returned when (u9) is sent.

       <b>Tack</b> will test this sequence before running any of the pad tests or the
       function key tests.  <b>Tack</b> will ask you the following:

              Hit lower case g to start testing...

       After it sends this message it will send the enquire string.   It  will
       then read characters from the terminal until it sees the letter g.

</pre>
<h3><a name="h3-Testing-and-Repairing-Pad-Timings" id="h3-Testing-and-Repairing-Pad-Timings">Testing and Repairing Pad Timings</a></h3>
<pre>       The  pad  timings  in distributed terminfo entries are often incorrect.
       One major motivation for this program is to make it relatively easy  to
       tune these timings.

       You  can  verify and edit the pad timings for a terminal with the "test
       string capabilities" function (this is also part of  the  "normal  test
       sequence" function).

       The key to determining pad times is to find out the effective baud rate
       of the terminal.  The effective baud  rate  determines  the  number  of
       characters  per  second  that  the  terminal  can accept without either
       handshaking or losing data.  This rate  is  frequently  less  than  the
       nominal cps rate on the RS-232 line.

       <b>Tack</b> uses the effective baud rate to judge the duration of the test and
       how much a particular escape sequence will perturb the terminal.

       Each pad test has two associated variables that can be tweaked to  help
       verify the correctness of the pad timings.  One is the pad test length.
       The other is the pad multiplier,  which  is  used  if  the  pad  prefix
       includes  "*".   In  curses use, it is often the first parameter of the
       capability (if there is one).  For a capability like (dch) or (il) this
       will   be   the  number  of  character  positions  or  lines  affected,
       respectively.

       <b>Tack</b> will run the pad tests and display the results  to  the  terminal.
       On capabilities that have multipliers <b>tack</b> will not tell you if the pad
       needs the multiplier or not.  You must make this decision  yourself  by
       rerunning the test with a different multiplier.  If the padding changes
       in proportion to the multiplier than the multiplier  is  required.   If
       the  multiplier  has  little or no effect on the suggested padding then
       the multiplier is not needed.  Some capabilities will take several runs
       to  get  a  good feel for the correct values.  You may wish to make the
       test longer to get more accurate results.  System load will also effect
       the  results  (a  heavily loaded system will not stress the terminal as
       much, possibly leading to pad timings that are too short).

</pre>
<h2><a name="h2-FILES" id="h2-FILES">FILES</a></h2>
<pre>       tack.log    If logging is enabled then all characters  written  to  the
                   terminal  will also be written to the log file.  This gives
                   you the ability to see how the tests were performed.   This
                   feature is disabled by default.

       <i>term</i>        If  you  make  changes to the terminfo entry <b>tack</b> will save
                   the new terminfo to a file.  The file will  have  the  same
                   name as the terminal name.

</pre>
<h2><a name="h2-NOTES" id="h2-NOTES">NOTES</a></h2>
<pre>       The  tests  done  at  the  beginning  of  the program are assumed to be
       correct later in the code.  In particular, <b>tack</b> displays the number  of
       lines  and  columns  indicated  in  the  terminfo  entry as part of its
       initial output.  If these values are wrong a large number of tests will
       fail or give incorrect results.

</pre>
<h2><a name="h2-BUGS" id="h2-BUGS">BUGS</a></h2>
<pre>       If the screen size is incorrect, many of the tests will fail.

</pre>
<h2><a name="h2-AUTHORS" id="h2-AUTHORS">AUTHORS</a></h2>
<pre>       Concept, design, and original implementation by Daniel Weaver
       &lt;dan.weaver@znyx.com&gt;.

       Portions of the code and documentation are by Eric S. Raymond
       &lt;esr@snark.thyrsus.com&gt;.

       Refactored by Thomas E. Dickey to eliminate dependency on <b>ncurses</b>
       internal functions, and to allow <b>tack</b> to work with other
       implementations of curses and terminfo than <b>ncurses</b>.

</pre>
<h2><a name="h2-SEE-ALSO" id="h2-SEE-ALSO">SEE ALSO</a></h2>
<pre>       <b>infocmp(1M)</b>, <b>tic(1M)</b>, <a href="/ncurses/man/ncurses.3x.html"><b>ncurses(3X)</b></a>, <b>terminfo(5)</b>.  You should also have
       the documentation supplied by the terminal manufacturer.

terminfo action checker           2024-04-30                           <b>tack(1)</b>
</pre>
<div class="nav">
<ul>
<li><a href="tack.html" class="nav-top">(top)</a><br>
<li><a href="#h2-NAME">NAME</a></li>
<li><a href="#h2-SYNOPSIS">SYNOPSIS</a></li>
<li><a href="#h2-DESCRIPTION">DESCRIPTION</a>
<ul>
<li><a href="#h3-OPTIONS">OPTIONS</a></li>
</ul>
</li>
<li><a href="#h2-OVERVIEW">OVERVIEW</a></li>
<li><a href="#h2-CREATING-NEW-ENTRIES">CREATING NEW ENTRIES</a></li>
<li><a href="#h2-VERIFYING-AN-EXISTING-ENTRY">VERIFYING AN EXISTING ENTRY</a></li>
<li><a href="#h2-CORRECTING-PAD-TIMINGS">CORRECTING PAD TIMINGS</a>
<ul>
<li><a href="#h3-Theory-of-Overruns-and-Padding">Theory of Overruns and Padding</a></li>
<li><a href="#h3-Timing-your-terminal">Timing your terminal</a></li>
<li><a href="#h3-Testing-and-Repairing-Pad-Timings">Testing and Repairing Pad Timings</a></li>
</ul>
</li>
<li><a href="#h2-FILES">FILES</a></li>
<li><a href="#h2-NOTES">NOTES</a></li>
<li><a href="#h2-BUGS">BUGS</a></li>
<li><a href="#h2-AUTHORS">AUTHORS</a></li>
<li><a href="#h2-SEE-ALSO">SEE ALSO</a></li>
</ul>
</div>
</body>
</html>
